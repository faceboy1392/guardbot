{
  // Place your guardbot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Event file": {
    "scope": "typescript",
    "prefix": "EVENT",
    "body": [
      "import { Events } from \"discord.js\";",
      "import { EventData, EventExecutable } from \"../classes/Event\";",
      "import Bot from \"../classes/Bot\";",
      "",
      "const data: EventData = {",
      "  name: Events.PLACEHOLDER",
      "  once: false,",
      "};",
      "",
      "class Impl extends EventExecutable {",
      "  async execute(bot: Bot, arg: any) {",
      "    console.warn(`Event ${data.name} has no execute body`);",
      "  }",
      "}",
      "",
      "export default { name: data.name, once: data.once, Impl };"
    ],
    "description": "for guardbot"
  },

  "Command file": {
    "scope": "typescript",
    "prefix": "COMMAND",
    "body": [
      "import { ChatInput, CommandData, CommandType, Ctx, Executable, } from \"../../classes/Command\";",
      "import Bot from \"../../classes/Bot\";",
      "",
      "// Static data about the command",
      "const data: CommandData = {",
      "  structure: {",
      "    name: \"${TM_FILENAME_BASE:NAME}\",",
      "    description: \"_\",",
      "    type: CommandType.ChatInput,",
      "  },",
      "  scope: \"global\",",
      "  perms: {",
      "    bot: [],",
      "  },",
      "  __dirname,",
      "};",
      "",
      "// New instance of implementation made each time the command is used",
      "class Impl extends Executable {",
      "  async execute(bot: Bot, i: ChatInput, ctx: Ctx) {",
      "    i.reply({ content: \"my developer hasnt added this command yet ðŸ’€\", ephemeral: true });",
      "  }",
      "}",
      "",
      "// don't touch this",
      "export default { data, name: data.structure.name, Impl };"
    ],
    "description": "for guardbot"
  }
}
